# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AbilityDto {
  """
  Id of the object
  """
  id: ID!

  """
  Latest update date for object
  """
  updatedAt: String!

  """
  Creation date for object
  """
  createdAt: String!

  """
  Name of the ability
  """
  name: String!

  """
  Description of the ability
  """
  description: String!
}

type AbilityMetadata {
  totalCount: Int!
  hasNextPage: Boolean!
  limit: Int!
  offset: Int!
}

type AbilityPaginated {
  items: [AbilityDto!]
  metadata: AbilityMetadata!
}

type GenerationDto {
  """
  Id of the object
  """
  id: ID!

  """
  Latest update date for object
  """
  updatedAt: String!

  """
  Creation date for object
  """
  createdAt: String!

  """
  The order of the generation
  """
  order: Int!
}

type GenerationMetadata {
  totalCount: Int!
  hasNextPage: Boolean!
  limit: Int!
  offset: Int!
}

type GenerationPaginated {
  items: [GenerationDto!]
  metadata: GenerationMetadata!
}

type GameVersionDto {
  """
  Id of the object
  """
  id: ID!

  """
  Latest update date for object
  """
  updatedAt: String!

  """
  Creation date for object
  """
  createdAt: String!
  name: String!
  imageUrl: String!
  generation: GenerationDto!
}

type GameVersionMetadata {
  totalCount: Int!
  hasNextPage: Boolean!
  limit: Int!
  offset: Int!
}

type GameVersionPaginated {
  items: [GameVersionDto!]
  metadata: GameVersionMetadata!
}

type RegionDto {
  """
  Id of the object
  """
  id: ID!

  """
  Latest update date for object
  """
  updatedAt: String!

  """
  Creation date for object
  """
  createdAt: String!

  """
  Name of the region
  """
  name: String!

  """
  Generated related to the region
  """
  generation: GenerationDto!
}

type LocationDto {
  """
  Id of the object
  """
  id: ID!

  """
  Latest update date for object
  """
  updatedAt: String!

  """
  Creation date for object
  """
  createdAt: String!

  """
  Name of the location
  """
  name: String!

  """
  Region of the location
  """
  region: RegionDto!
}

type LocationMetadata {
  totalCount: Int!
  hasNextPage: Boolean!
  limit: Int!
  offset: Int!
}

type LocationPaginated {
  items: [LocationDto!]
  metadata: LocationMetadata!
}

type PokemonTypeDto {
  """
  Id of the object
  """
  id: ID!

  """
  Latest update date for object
  """
  updatedAt: String!

  """
  Creation date for object
  """
  createdAt: String!

  """
  Name of the pokemon type
  """
  name: String!
}

type PokemonTypeMetadata {
  totalCount: Int!
  hasNextPage: Boolean!
  limit: Int!
  offset: Int!
}

type PokemonTypePaginated {
  items: [PokemonTypeDto!]
  metadata: PokemonTypeMetadata!
}

type PokemonMoveDto {
  """
  Id of the object
  """
  id: ID!

  """
  Latest update date for object
  """
  updatedAt: String!

  """
  Creation date for object
  """
  createdAt: String!
  name: String!
  description: String!
  pokemonMoveDetails: [PokemonMoveDetailDto!]!
}

type PokemonMoveDetailDto {
  """
  Id of the object
  """
  id: ID!

  """
  Latest update date for object
  """
  updatedAt: String!

  """
  Creation date for object
  """
  createdAt: String!
  levelLearnedAt: Int!
  learnMethod: LearnMethod!
  version: GameVersionDto!
  pokemonMove: PokemonMoveDto!
  pokemonType: PokemonTypeDto!
  accuracy: Int!
  pp: Int!
  power: Int!
  effect: Int!
  damage: Damage!
  contestType: Int!
  contestCharm: Int!
  contestLocking: Int!
}

enum LearnMethod {
  EVOLUTION
}

enum Damage {
  STATUT
  PHYSIQUE
  SPECIAL
}

type PokemonMoveMetadata {
  totalCount: Int!
  hasNextPage: Boolean!
  limit: Int!
  offset: Int!
}

type PokemonMovePaginated {
  items: [PokemonMoveDto!]
  metadata: PokemonMoveMetadata!
}

type RegionMetadata {
  totalCount: Int!
  hasNextPage: Boolean!
  limit: Int!
  offset: Int!
}

type RegionPaginated {
  items: [RegionDto!]
  metadata: RegionMetadata!
}

type Query {
  findAllAbilitys(offset: Int = 0, limit: Int = 10): AbilityPaginated!
  ability(id: String!): AbilityDto!
  findAllPokemonMoves(offset: Int = 0, limit: Int = 10): PokemonMovePaginated!
  pokemonMove(id: String!): PokemonMoveDto!
  findAllPokemonTypes(offset: Int = 0, limit: Int = 10): PokemonTypePaginated!
  pokemonType(id: String!): PokemonTypeDto!
  findAllGameVersions(offset: Int = 0, limit: Int = 10): GameVersionPaginated!
  gameVersion(id: String!): GameVersionDto!
  findAllGenerations(offset: Int = 0, limit: Int = 10): GenerationPaginated!
  generation(id: String!): GenerationDto!
  findAllRegions(offset: Int = 0, limit: Int = 10): RegionPaginated!
  region(id: String!): RegionDto!
  findAllLocations(offset: Int = 0, limit: Int = 10): LocationPaginated!
  location(id: String!): LocationDto!
}

type Mutation {
  createAbility(abilityInputDto: CreateAbilityDto!): AbilityDto!
  updateAbility(abilityInputDto: UpdateAbilityDto!): AbilityDto!
  removeAbility(id: String!): AbilityDto
  createPokemonMove(pokemonMoveInputDto: CreatePokemonMoveDto!): PokemonMoveDto!
  updatePokemonMove(
    updatePokemonMoveDto: UpdatePokemonMoveDto!
  ): PokemonMoveDto!
  removePokemonMove(id: String!): PokemonMoveDto
  createPokemonMoveDetail(
    pokemonMoveDetailDto: CreatePokemonMoveDetailDto!
    pokemonMoveId: String!
  ): PokemonMoveDetailDto!
  updatePokemonMoveDetail(
    pokemonMoveDetailDto: UpdatePokemonMoveDetailDto!
    pokemonMoveDetailId: String!
    pokemonMoveId: String!
  ): PokemonMoveDetailDto!
  removePokemonMoveDetail(pokemonMoveDetailId: String!): PokemonMoveDetailDto
  createPokemonType(createPokemonType: CreatePokemonTypeDto!): PokemonTypeDto!
  removePokemonType(id: String!): PokemonTypeDto
  createGameVersion(createGameVersion: CreateGameVersionDto!): GameVersionDto!
  updateGameVersion(updateGameVersion: UpdateGameVersionDto!): GameVersionDto!
  removeGameVersion(id: String!): GameVersionDto
  createGeneration(createGenerationDto: CreateGenerationDto!): GenerationDto!
  removeGeneration(id: String!): GenerationDto
  createRegion(regionInputDto: CreateRegionDto!): RegionDto!
  removeRegion(id: String!): RegionDto
  createLocation(createLocationDto: CreateLocationDto!): LocationDto!
  removeLocation(id: String!): LocationDto
}

input CreateAbilityDto {
  """
  Name of the ability
  """
  name: String!

  """
  Description of the ability
  """
  description: String!
}

input UpdateAbilityDto {
  """
  Description of the ability
  """
  description: String!

  """
  Id of the ability to update
  """
  id: String!
}

input CreatePokemonMoveDto {
  name: String!
  description: String!
}

input UpdatePokemonMoveDto {
  description: String!
  id: String!
}

input CreatePokemonMoveDetailDto {
  levelLearnedAt: Int!
  learnMethod: LearnMethod!
  version: String!
  pokemonType: String!
  pokemonMove: String
  accuracy: Int!
  pp: Int!
  power: Int!
  effect: Int!
  damage: Damage!
  contestType: Int!
  contestCharm: Int!
  contestLocking: Int!
}

input UpdatePokemonMoveDetailDto {
  levelLearnedAt: Int
  learnMethod: LearnMethod
  version: String
  pokemonType: String
  pokemonMove: String
  accuracy: Int
  pp: Int
  power: Int
  effect: Int
  damage: Damage
  contestType: Int
  contestCharm: Int
  contestLocking: Int
}

input CreatePokemonTypeDto {
  """
  Name of the pokemon type
  """
  name: String!
}

input CreateGameVersionDto {
  name: String!
  imageUrl: String!
  generation: String!
}

input UpdateGameVersionDto {
  imageUrl: String!
  generation: String!
  id: String!
}

input CreateGenerationDto {
  """
  The order of the generation
  """
  order: Int!
}

input CreateRegionDto {
  """
  Name of the region
  """
  name: String!

  """
  Locations that are related to the region
  """
  generation: String!
}

input CreateLocationDto {
  """
  Name of the location
  """
  name: String!

  """
  Id of the region
  """
  region: String!
}
